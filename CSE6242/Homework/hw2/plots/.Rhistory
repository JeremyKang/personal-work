timeRec = c()
timeR = c()
for (n in iter) {
timeFor = c(timeFor, system.time(sum_log_gamma_loop(n)[1]))
timeRec = c(timeRec, system.time(sum_log_gamma_recursive(n)[1]))
timeR = c(timeR, system.time(sum_log_gamma(n)[1]))
}
#Built-in R log function
lgamma = function(n) {
return(lfactorial(n))
}
lgamma(5)
#HW1Q2: For log function
log_gamma_loop = function(n) {
res = 1
for(i in seq(n)) {
res = res * i
}
return(log(res))
}
log_gamma_loop(5)
#HW1Q3: Recursive log function
log_gamma_recursive = function(n) {
if (n == 1) {
return(log(n))
} else {
return(log_gamma_recursive(n-1) + log(n))
}
}
log_gamma_recursive(10)
#HW1Q4 Sum of log factorials
#For loop function
sum_log_gamma_loop = function(n) {
sum = 0
for(i in seq(n)) {
if (sum != log_gamma_loop(n)) {
sum = sum + log(i)
}
}
return(sum)
}
sum_log_gamma_loop(100)
#Recursive function
sum_log_gamma_recursive = function(n) {
sum = 0
for(i in seq(n)) {
if (sum != log_gamma_recursive(n)) {
sum = sum + log(i)
}
}
return(sum)
}
sum_log_gamma_recursive(13)
#Built-in function
sum_log_gamma = function(n) {
sum = 0
for(i in seq(n)) {
if (sum != lgamma(n)) {
sum = sum + log(i)
}
}
return(sum)
}
sum_log_gamma(5)
options(expressions=500000)
iter = seq(100, 2000, by = 10)
timeFor = c()
timeRec = c()
timeR = c()
for (n in iter) {
timeFor = c(timeFor, system.time(sum_log_gamma_loop(n)[1]))
timeRec = c(timeRec, system.time(sum_log_gamma_recursive(n)[1]))
timeR = c(timeR, system.time(sum_log_gamma(n)[1]))
}
df <- data.frame(For_loop=timeFor, Recursive=timeRec, Built_in=timeR)
plot.ts(df, main="Growth Rates for Built-in, Recursive, and For-Loop", xlab="Iteration")
summary(df)
length(df[df==0])
length(df[df[timeFor==0]])
length(df[timeFor] == 0)
head(df[timeFor])
View(df)
?reshape2
help(reshape2)
??Reshape2
getwd()
setwd('~/Desktop/Spring2017/CSE6242/Homework/hw2/plots')
library(ggplot2)
library(ggplot2)
library(ggplot2)
library(GGally)
library(reshape2)
data(midwest)
attach(midwest, warn.conflicts = FALSE)
IL_df <- subset(midwest, midwest$state == "IL")
IN_df <- subset(midwest, midwest$state == "IN")
MI_df <- subset(midwest, midwest$state == "MI")
OH_df <- subset(midwest, midwest$state == "OH")
WI_df <- subset(midwest, midwest$state == "WI")
class(WI_df)
View(WI_df)
View(OH_df)
?lm
midwest$percadults = (midwest$popadults / midwest$poptotal) * 100
ed_col <- function(df) {
df$totpopPE = (sum(((percprof * popadults / poptotal) * .01) * poptotal))
}
all_df <- c(IL_df, IN_df, MI_df, OH_df, WI_df)
view(all_df)
View(all_df)
all_df <- list(IL_df, IN_df, MI_df, OH_df, WI_df)
all_dfÂ 
for (df in all_df) {
ed_col(df)
}
View(df)
IL_df <- subset(midwest, midwest$state == "IL")
IN_df <- subset(midwest, midwest$state == "IN")
MI_df <- subset(midwest, midwest$state == "MI")
OH_df <- subset(midwest, midwest$state == "OH")
WI_df <- subset(midwest, midwest$state == "WI")
library(ggplot2)
library(GGally)
library(reshape2)
data(midwest)
data(midwest)
data(midwest)
attach(midwest, warn.conflicts = FALSE)
IL_df <- subset(midwest, midwest$state == "IL")
IN_df <- subset(midwest, midwest$state == "IN")
MI_df <- subset(midwest, midwest$state == "MI")
OH_df <- subset(midwest, midwest$state == "OH")
WI_df <- subset(midwest, midwest$state == "WI")
ed_col <- function(df) {
df$totpopPE = (sum(((percprof * popadults / poptotal) * .01) * poptotal))
}
all_df <- list(IL_df, IN_df, MI_df, OH_df, WI_df)
for (df in all_df) {
ed_col(df)
}
View(IL_df)
?lapply
midwest$percadults = (midwest$popadults / midwest$poptotal) * 100
IL_df <- subset(midwest, midwest$state == "IL")
IN_df <- subset(midwest, midwest$state == "IN")
MI_df <- subset(midwest, midwest$state == "MI")
OH_df <- subset(midwest, midwest$state == "OH")
WI_df <- subset(midwest, midwest$state == "WI")
df$totpopPE = (sum(((percprof * popadults / poptotal) * .01) * poptotal))
View(midwest)
midwest$totpopPE = percprof*popadults / poptotal
View(midwest)
u
View(midwest)
midwest$Perc_tot_pop_PE = percprof*popadults / poptotal
library(ggplot2)
library(GGally)
library(reshape2)
data(midwest)
attach(midwest, warn.conflicts = FALSE)
midwest$percadults = (midwest$popadults / midwest$poptotal) * 100
midwest$Perc_tot_pop_PE = percprof*popadults / poptotal
IL_df <- subset(midwest, midwest$state == "IL")
IN_df <- subset(midwest, midwest$state == "IN")
MI_df <- subset(midwest, midwest$state == "MI")
OH_df <- subset(midwest, midwest$state == "OH")
WI_df <- subset(midwest, midwest$state == "WI")
View(IL_df)
total <- sum((IL_df$Perc_tot_pop_PE * .01) * poptotal)
IL_df$total <- sum((IL_df$Perc_tot_pop_PE * .01) * poptotal)
total <- sum((midwest$Perc_tot_pop_PE * .01) * poptotal)
IN_df$total <- sum((IN_df$Perc_tot_pop_PE * .01) * poptotal)
View(IN_df)
sum(poptotal)
MI_df$total <- sum((MI_df$Perc_tot_pop_PE * .01) * poptotal)
OH_df$total <- sum((OH_df$Perc_tot_pop_PE * .01) * poptotal)
WI_df$total <- sum((WI_df$Perc_tot_pop_PE * .01) * poptotal)
sum(IL_df$total[1], 1)
sum(IL_df$total[1], -1)
sum(IL_df$total[1], IN_df$total[1], MI_df$total[1], OH_df$total[1], WI_df[1])
sum(IL_df$total[1], IN_df$total[1], MI_df$total[1], OH_df$total[1], WI_df$total[1])
total <- sum(midwest$Perc_tot_pop_PE * poptotal)
a / total
a <- sum(IL_df$total[1], IN_df$total[1], MI_df$total[1], OH_df$total[1], WI_df$total[1])
a / total
total
total <- sum((midwest$Perc_tot_pop_PE * .01) poptotal)
total <- sum((midwest$Perc_tot_pop_PE * .01) * poptotal)
total
IL_df$total
IL_df$total[1]
IL_df$total <- sum((IL_df$Perc_tot_pop_PE * .001) * poptotal)
IL_df$total[1]
IL_df$total <- sum((IL_df$Perc_tot_pop_PE * .0001) * poptotal)
IL_df$total[1]
IL_df$total <- sum((IL_df$Perc_tot_pop_PE * .0001) * poptotal)
IN_df$total <- sum((IN_df$Perc_tot_pop_PE * .0001) * poptotal)
MI_df$total <- sum((MI_df$Perc_tot_pop_PE * .0001) * poptotal)
OH_df$total <- sum((OH_df$Perc_tot_pop_PE * .0001) * poptotal)
WI_df$total <- sum((WI_df$Perc_tot_pop_PE * .0001) * poptotal)
a <- sum(IL_df$total[1], IN_df$total[1], MI_df$total[1], OH_df$total[1], WI_df$total[1])
a / total
PEtotals <- data.frame(IL_df$total[1], IN_df$total[1], MI_df$total[1], OH_df$total[1], WI_df$total[1])
View(PEtotals)
PEtotals <- melt(data.frame(IL_df$total[1], IN_df$total[1], MI_df$total[1], OH_df$total[1], WI_df$total[1]))
View(PEtotals)
ggplot(PEtotals, aes(x=variable, y=value)) +
geom_bar(stat="identity") +
labs(title="Population of working professionals across midwestern states",
x="State",
y="Population")
PEpercents <- melt(data.frame(IL_df$Perc_tot_pop_PE, IN_df$Perc_tot_pop_PE,
MI_df$Perc_tot_pop_PE, OH_df$Perc_tot_pop_PE,
WI_df$Perc_tot_pop_PE))
IL_df$Sum_PE <- sum(IL_df$Perc_tot_pop_PE)
IN_df$Sum_PE <- sum(IN_df$Perc_tot_pop_PE)
MI_df$Sum_PE <- sum(MI_df$Perc_tot_pop_PE)
OH_df$Sum_PE <- sum(OH_df$Perc_tot_pop_PE)
WI_df$Sum_PE <- sum(WI_df$Perc_tot_pop_PE)
PEpercents <- melt(data.frame(IL_df$Sum_PE, IN_df$Sum_PE,
MI_df$Sum_PE, OH_df$Sum_PE,
WI_df$Sum_PE))
PEpercents <- melt(data.frame(IL_df$Sum_PE[1], IN_df$Sum_PE[1],
MI_df$Sum_PE[1], OH_df$Sum_PE[1],
WI_df$Sum_PE[1]))
ggplot(PEtotals, aes(x=variable, y=value)) +
geom_bar() + #stat="identity") +
labs(title="Population of working professionals across midwestern states",
x="State",
y="Population")
ggplot(PEtotals, aes(x=variable, y=value)) +
geom_bar(stat="identity") +
labs(title="Population of working professionals across midwestern states",
x="State",
y="Population")
ggplot(PEpercents, aes(x=variable, y=value)) +
geom_bar(stat="identity") +
labs(title="Population of working professionals across midwestern states",
x="State",
y="Population")
x = runif(10, 1000, 10)
x = runif(N)
x = runif(seq(10, 1000, 10))
ggplot(x, aes(x=x)) +
geom_histogram()
ggplot(x.melted, aes(x=x)) +
geom_histogram()
melt(x)
x <- melt(x)
ggplot(x, aes(x=x)) +
geom_histogram()
ggplot(N, aes("")) +
geom_histogram()
N = seq(10, 100000, 10)
ggplot(N, aes("")) +
geom_histogram()
N <- melt(N)
ggplot(N, aes("")) +
geom_histogram()
ggplot(N, aes(y= ..density..)) +
geom_histogram(alpha=0.3) + geom_density(size=1.0, color="red")
Uni_df <- data.frame(x = c(rnorm(200, rnorm(200, mean=50))))
ggplot(Uni_df, aes(x=x, y=..density..)) +
geom_histogram(alpha=0.3) +
geom_density(size=1.0, color="red")
Uni_df <- data.frame(x = c(rnorm(1000, rnorm(1000, mean=50))))
ggplot(Uni_df, aes(x=x, y=..density..)) +
geom_histogram(alpha=0.3) +
geom_density(size=1.0, color="red")
Uni_df <- data.frame(x = c(rnorm(10000, rnorm(1000, mean=50))))
ggplot(Uni_df, aes(x=x, y=..density..)) +
geom_histogram(alpha=0.3) +
geom_density(size=1.0, color="red")
Uni_df <- data.frame(x = c(rnorm(10000, rnorm(10000, mean=50))))
ggplot(Uni_df, aes(x=x, y=..density..)) +
geom_histogram(alpha=0.3) +
geom_density(size=1.0, color="red")
set.seed(123)
Uni_df <- data.frame(x = c(rnorm(10000, rnorm(10000, mean=50))))
ggplot(Uni_df, aes(x=x, y=..density..)) +
geom_histogram(alpha=0.3) +
geom_density(size=1.0, color="red")
ggplot(Uni_df, aes(x=x, y=..density..)) +
geom_boxplot() +
coord_flip() +
scale_x_discrete("")
ggplot(Uni_df, aes(x=x, y=..density..)) +
geom_boxplot() #+
ggplot(Uni_df, aes(x=x)) +
geom_boxplot() #+
ggplot(Uni_df, aes("","")) +
geom_boxplot() #+
ggplot(Uni_df, aes(x=x,"")) +
geom_boxplot() #+
ggplot(Uni_df, aes(x=x, y=..density..)) +
geom_boxplot() #+
Uni2_df <- data.frame(condition = factor(rep(c("X", "Z"), each=10000)),
score = c(rnorm(10000), rnorm(10000, mean=50)))
ggplot(Uni_df2, aes(condition, score)) +
geom_boxplot() #+
ggplot(Uni2_df, aes(condition, score)) +
geom_boxplot() #+
Uni2_df <- data.frame(condition = factor(rep(c("X", "Z"), each=10000)),
score = sample(1:10000, 10000)))
Uni2_df <- data.frame(condition = factor(rep(c("X", "Z"), each=10000)),
score = sample(1:10000, 10000))
ggplot(Uni2_df, aes(condition, score)) +
geom_boxplot() #+
Uni2_df <- data.frame(condition = factor(rep(c("X", "Z"), each=10000)),
score = sample(1:5000, 10000))
Uni2_df <- data.frame(condition = factor(rep(c("X", "Z"), each=10000)),
score = sample(1:5000, 10000, replace=FALSE))
Uni2_df <- data.frame(condition = factor(rep(c("X", "Z"), each=10000)),
score = sample(1:5000, 10000, replace=TRUE))
ggplot(Uni2_df, aes(condition, score)) +
geom_boxplot() #+
Uni_df2 <- data.frame(X=sample(1:5000, 10000, replace=TRUE), Z=sample(1:5000, 10000, replace=TRUE))
ggplot(Uni_df2, aes(condition, score)) +
geom_boxplot() #+
ggplot(Uni_df2, aes(X, Z)) +
geom_boxplot() #+
?runif
Uni_df2 <- data.frame(x=factor(rep(c("X", "Z"), each=10000)),
y=runif(min=10, max=10000)
sample(1:5000, 10000, replace=TRUE), Z=sample(1:5000, 10000, replace=TRUE))
Uni_df2 <- data.frame(x=factor(rep(c("X", "Z"), each=10000)),
y=runif(min=10, max=10000))
Uni_df2 <- data.frame(x=factor(rep(c("X", "Z"), each=10000)),
y=runif(sd, min=10, max=10000))
Uni_df2 <- data.frame(x=factor(rep(c("X", "Z"), each=10000)),
y=runif(1:10000, min=10, max=10000))
ggplot(Uni_df2, aes(X, Z)) +
geom_boxplot() #+
ggplot(Uni_df2, aes(x, y)) +
geom_boxplot() #+
x3 <- runif(1:10000, min=10, max=500)
y3 <- runif(1:10000, min=50, max=7300)
ggplot(Uni_df2, aes(x3, y3)) +
geom_boxplot() #+
Uni_df2 <- data.frame(x=x3, y=y3)
ggplot(Uni_df2, aes(x3, y3)) +
geom_boxplot() #+
data(mtcars)
data(mpg)
ggplot(mpg, aes("", hwy)) + #recall ggplot requires us to use this AES function (qplot does not)
geom_boxplot() + #add the box plot geometry and get it from this function
coord_flip() + #this example, we execute this function because we want the box plot to lie on it's side
scale_x_discrete("") #Also required if we want to make the box plot lying down
ggplot(mpg, aes(reorder(class, -hwy, median), hwy)) + #reorder the classes of increasing MPG using the median function
geom_boxplot() +
coord_flip() +
scale_x_discrete("class")
View(mpg)
Uni_df2 <- data.frame(condition = factor(rep(c("X", "Z", "C"), each=10000)),
score = sample(1:5000, 10000, replace=TRUE))
ggplot(Uni_df2, aes(condition, score)) +
geom_boxplot() #+
Uni_df2 <- data.frame(condition = factor(rep(c("X", "Z", "C"), each=100)),
score = sample(1:50, 100, replace=TRUE))
ggplot(Uni_df2, aes(condition, score)) +
geom_boxplot() #+
x3 <- runif(1:10000, min=10, max=100)
y3 <- runif(1:10000, min=-200, max=260)
ggplot(Uni_df2, aes(x3, y3)) +
geom_boxplot() #+
x3 <- runif(1:100, min=10, max=100)
y3 <- runif(1:100, min=-200, max=260)
ggplot(Uni_df2, aes(x3, y3)) +
geom_boxplot() #+
Uni_df2 <- data.frame(x=x3, y=y3)
ggplot(Uni_df2, aes(x3, y3)) +
geom_boxplot() #+
Uni_df2 <- data.frame(x=factor(rep(c("X", "Z"))), y=c(y1,y2))
y1 <- runif(1:100, min=10, max=100)
y2 <- runif(1:100, min=-200, max=260)
Uni_df2 <- data.frame(x=factor(rep(c("X", "Z"))), y=c(y1,y2))
ggplot(Uni_df2, aes()) +
geom_boxplot() #+
ggplot(Uni_df2, aes(x=x, y=y)) +
geom_boxplot() #+
y1 <- runif(1:100, min=75, max=180)
y2 <- runif(1:100, min=-200, max=260)
Uni_df2 <- data.frame(x=factor(rep(c("X", "Z"))), y=c(y1,y2))
ggplot(Uni_df2, aes(x=x, y=y)) +
geom_boxplot() #+
y1 <- runif(1:100, min=75, max=180)
y2 <- runif(1:100, min=-200, max=260)
Uni_df2 <- data.frame(x=factor(rep(c("Y1", "Y2"))), y=c(y1,y2))
ggplot(Uni_df2, aes(x=x, y=y)) +
geom_boxplot() #+
ggplot(Uni_df2, aes(x=x, y=y)) +
geom_boxplot() +
coord_flip() +
scale_x_discrete("")
y1 <- runif(1:100, min=40, max=180, mean=60)
?runif
?sample
y1 <- rnorm(1:100, min=40, max=180, mean=60)
y1 <- rnorm(1:100, mean=60)
y2 <- rnorm(1:100, mean=170)
Uni_df2 <- data.frame(x=factor(rep(c("Y1", "Y2"))), y=c(y1,y2))
ggplot(Uni_df2, aes(x=x, y=y)) +
geom_boxplot() +
coord_flip() +
scale_x_discrete("")
ggplot(Uni_df2, aes(x=x, "")) +
geom_boxplot() +
coord_flip() +
scale_x_discrete("")
ggplot(Uni_df2, aes("", y=y)) +
geom_boxplot() +
coord_flip() +
scale_x_discrete("")
ggplot(Uni_df2, aes(x=x, "")) +
geom_boxplot() +
coord_flip() +
scale_x_discrete("")
ggplot(Uni_df2, aes(x=x, y=y)) +
geom_boxplot() +
coord_flip() +
scale_x_discrete("")
runif
runif
y1 <- runif(1:100, min=40, max=180, mean=60)
y2 <- runif(1:100, min=-200, max=260, mean=170)
Uni_df2 <- data.frame(x=factor(rep(c("Y1", "Y2"))), y=c(y1,y2))
ggplot(Uni_df2, aes(x=x, y=y)) +
geom_boxplot() +
coord_flip() +
scale_x_discrete("")
ggplot(Uni_df2, aes(x=x, "")) +
geom_boxplot() +
coord_flip() +
scale_x_discrete("")
ggplot(Uni_df2, aes("", y=y)) +
geom_boxplot() +
coord_flip() +
scale_x_discrete("")
View(Uni_df2)
y1 <- runif(1:100, min=40, max=180, mean=60)
y1 <- runif(1:100, min=40, max=120)
y2 <- runif(1:100, min=-200, max=260)
Uni_df2 <- data.frame(x=factor(rep(c("Y1", "Y2"))), y=c(y1,y2))
ggplot(Uni_df2, aes(x=x, y=y)) +
geom_boxplot() +
coord_flip() +
scale_x_discrete("")
y1 <- rnorm(1:100, mean=20, sd=4)
Uni_df2 <- data.frame(x=factor(rep(c("Y1", "Y2"))), y=c(y1,y2))
ggplot(Uni_df2, aes(x=x, y=y)) +
geom_boxplot() +
coord_flip() +
scale_x_discrete("")
ggplot(Uni_df2, aes(x=x, y=y)) +
geom_boxplot() +
coord_flip() #+
ggplot(Uni_df2, aes(x=x, y=y)) +
geom_boxplot() +
coord_flip() +
labs(title="Random Distribution of two variables",
y="",
x="")
ggplot(Uni_df2, aes(x=x, y=y)) +
geom_boxplot() +
coord_flip() +
labs(title="Random Distribution of two variables",
y="Variables",
x="Range")
ggplot(Uni_df2, aes(x=x, y=y)) +
geom_boxplot() +
coord_flip() +
labs(title="Random distribution of two variables",
y="Variables",
x="Range")
D = data.frame(samples = c(rnorm(200, 1, 1),  #mean 1, std 1
rnorm(200, 0, 1),  #mean 0, std 1
rnorm(200, 0, 2))) #mean 0, std 2
D$parameter[1:200]   = 'N(1,1)'; #N(1,1) corresponds to the normal distribution with mean 1, std 1
D$parameter[201:400] = 'N(0,1)';
D$parameter[401:600] = 'N(0,2)';
qplot(samples,
facets = parameter~., #Facet graph that the rows describe the different values of the parameter
#or variable.
geom = 'histogram',
data = D)
ggplot(D, aes(sample = samples)) +
stat_qq() +
facet_grid(.~parameter)
?rt
x_grid = seq(-6, 6, length.out = 200)
R = data.frame(density = dnorm(x_grid, 0, 1))
R$samples = rnorm(200, 0, 1) #Create 200 samples from the normal distribution with parameters 0 and 1.
pm = list(df = 1.5)
ggplot(R, aes(sample = samples)) + #Call ggplot function with the data set that we just sampled from
#the normal distribution, telling it to use a qqplot and drawing
#the quantiles of the dataset against the quantiles from the
#distribution, denoted here by qt, which is the t-distribution
#with the specific parameter, in this case, df corresponds to
#degrees of freedom 1.5 (parameter of the t-distribution).
stat_qq(distribution = qt, dparams = pm)
pm
ggplot(Uni_df2, aes(x=x, y=y)) +
stat_qq(distribution=qt, dparms=.10)
ggplot(Uni_df2, aes(x=x, y=y)) +
stat_qq(distribution=qt, dparams=.10)
View(R)
qq1 <- melt(Uni_df2)
View(qq1)
ggplot(qq1, aes(x=x, y=y)) +
stat_qq(distribution=qt, dparams=.10)
ggplot(qq1, aes(x=x, y=value)) +
stat_qq(distribution=qt, dparams=.10)
